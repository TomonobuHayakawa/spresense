##############################################################################
# apps/examples/volte/config/mem_layout.conf
#
#   Copyright (C) 2016-2017 Sony Corporation. All rights reserved.
#   Author: Suzunosuke Hida<Suzunosuke.Hida@sony.com>
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with the
#    distribution.
# 3. Neither the name NuttX nor Sony nor the names of its contributors
#    may be used to endorse or promote products derived from this software
#    without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
# OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
# AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
##############################################################################

##############################################################################
# MemoryManager Configuration
#
UseFence            = true  # プールフェンスの使用有無 USE_MEMMGR_FENCE
UseDynamicPool      = false # 動的生成プールの使用有無 USE_MEMMGR_DYNAMIC_POOL
UseOver255Segments  = false # 255を超えるセグメント(最大65535)の使用有無 USE_MEMMGR_OVER255_SEGMENTS
UseCopiedPoolAttr   = false # 静的プール属性を作業領域にコピーして使用するか否か USE_MEMMGR_COPIED_POOL_ATTR

# 以下は未実装のため、false固定とする
UseMultiCore        = false # マルチコアサポート(共有プール)の使用有無 USE_MEMMGR_MULTI_CORE
UseSegDeleter       = false # セグメント解放時コールバックの使用有無 USE_MEMMGR_SEG_DELETER
UseSegThreshold     = false # セグメント数閾値コールバックの使用有無 USE_MEMMGR_SEG_THRESHOLD
UseRingBufPool      = false # RingBufプールの使用有無 USE_MEMMGR_RINGBUF_POOL
UseRingBufThreshold = false # バッファ量の閾値コールバックの使用有無 USE_MEMMGR_RINGBUF_THRESHOLD

require "mem_layout.rb"

##############################################################################
# User defined constants
# スクリプト内定義と重ならないように、"U_"で開始して英大文字、数字と"_"のみとする
# "U_MEM_"で始まる名称で定義すると、output_headerに同名のマクロが出力される
#
U_STD_ALIGN	= 8		# standard alignment
U_RAM_ALIGN	= 16	# RAM area alignment
U_MSGQ_ALIGN	= 64		# message queue area alignment
U_TILE_ALIGN	= 0x20000	# Memory Tile Align 128KB
U_APU_WORK_AREA_SIZE		= 0x00020000

##############################################################################
# Dynamic pool constants
# output_headerに、NUM_DYN_POOLSマクロとして出力される
#
if UseDynamicPool
  NumDynamicPools      = 1  # 動的生成プールの予約数(1以上、255 - NUM_MEM_POOLS以下)
end

#######################################################################################
# Memory device definition
# output_headerに、name_ADDRマクロとname_SIZEマクロが出力される
#
# name: デバイス名(3文字以上。英大文字で始まり、英大文字, 数字, "_"が使用可能)
# ram : デバイスがRAMならば、true。それ以外ならばfalse
# addr: アドレス(4の倍数の値)
# size: バイト単位のサイズ(0を除く4の倍数の値)
#
MemoryDevices.init(
  # name         ram    addr        size
  # バッファや Apu の領域はリザーブ領域として貰っているので、そこだけ使用する
  ["AUD_SRAM",   true,  0x000c0000, 0x00040000],
  ["RESERVED",   true,  0x0e000000, 0x00040000], # tantetive
  nil # end of definition
)

##############################################################################
# Fixed area definition
# output_headerに、name_ALIGN, name_ADDR, name_SIZEマクロが出力される
# フェンスが有効な場合は、name_L_FENCE, name_U_FENCEマクロも出力される
#
# name  : 領域名(英大文字で始まり、"_AREA"で終わる名称。英大文字, 数字, _が使用可能)
# device: 領域を確保するMemoryDevicesのデバイス名
# align : 領域の開始アライメント。0を除くMinAlign(=4)の倍数を指定する
# size  : 領域のサイズ。(0を除く4の倍数の値)
#         各デバイスの最終領域には、残りサイズを示すRemainderSizeを指定可能
# fence : フェンスの有効・無効を指定する(この項目は、UseFenceがfalseの場合は無視される)
#         deviceがRAMの場合のみ、フェンスを有効化することができる
#
FixedAreas.init(
  # name,                  device,     align,        size,         fence
  ["AUDIO_WORK_AREA",     "AUD_SRAM", U_TILE_ALIGN, 0x0003c000,   false], 
  ["MSG_QUE_AREA",        "AUD_SRAM", U_MSGQ_ALIGN, 0x00003140,   false], # DSP1 message queue area 
  ["MEMMGR_WORK_AREA",    "AUD_SRAM", U_STD_ALIGN,  0x00000200,   false], # MemMgrLite WORK Area
  ["MEMMGR_DATA_AREA",    "AUD_SRAM", U_STD_ALIGN,  0x00000100,   false], # MemMgrLite DATA Area

  # 予約領域。アクセスするとBusErrorになるはず
  ["SPL_MGR_AREA",        "RESERVED",  U_STD_ALIGN,  0x00000040,   false], # SpinlockMgr area (not used)
  ["APU_LOG_AREA",        "RESERVED",  U_STD_ALIGN,  0x00000040,   false], # Apu dump log (not used)

  nil # end of definition
)

##############################################################################
# Pool layout definition
# output_headerに、プールIDとNUM_MEM_POOLS, NUM_MEM_LAYOUTSおよび
# Lx_name_ALIGN, Lx_name_ADDR, Lx_name_SIZE, Lx_name_NUM_SEG, Lx_name_SEG_SIZE
# マクロが出力される(xはレイアウト番号)
# フェンスが有効な場合は、Lx_name_L_FENCE, Lx_name_U_FENCEマクロも出力される
#
# name : プール名(英大文字で始まり、"_POOL"で終わる名称。英大文字, 数字, _が使用可能)
# area : プール領域として使用するFixedAreaの領域名。領域はRAMに配置されていること
# type : プール種別。Basic, RingBuf(UseRingBufがtrueの場合に指定可能)のいずれか
# align: プールの開始アライメント。0を除くMinAlign(=4)の倍数を指定する
# size : プールのサイズ。0を除く4の倍数の値。Basicプールでは、セグメントサイズ * セグメント数
#        各areaの最終領域には、残りサイズを示すRemainderSizeを指定することができる
# seg  : セグメント数(1以上、255または65535以下)を指定する。UseOver255Segmentsを参照のこと
#        Basicプールの場合、size/seg が各セグメントのサイズとなる(剰余は無視される)
# fence    : フェンスの有効・無効を指定する。この項目は、UseFenceがfalseの場合は無視される
# spinlock : CPUコア間で共有する場合はスピンロック名を、非共有時は、""を指定する。
#            この項目は、UseMultiCoreがfalseの場合は無視される
#

#---------------------#
# Setting for normal mode
#---------------------#
# Definition for DEC_ES_MAIN_BUF_POOL
U_DEC_ES_MAIN_BUF_SIZE = 6144 # (1024sample * 2ch * 3 bytes) for 192kHz, 24bit Wav stream (= ES_BUFF_SIZE defined in player_obj.cpp)
U_DEC_ES_MAIN_BUF_SEG_NUM = 4
U_DEC_ES_MAIN_BUF_POOL_SIZE = U_DEC_ES_MAIN_BUF_SIZE * U_DEC_ES_MAIN_BUF_SEG_NUM

# Definition for REND_PCM_BUF_POOL
U_REND_PCM_BUF_SIZE = 8192	#(1024 * 48 / 24) * 2ch * 16bit (1024sample/frame@24kHz, 2ch, 16bit) (= MAX_PCM_BUF_SIZE defined in player_obj.cpp)
U_REND_PCM_BUF_SEG_NUM = 9  #StopコマンドによるFlush押出し考慮して+1
U_REND_PCM_BUF_POOL_SIZE = U_REND_PCM_BUF_SIZE * U_REND_PCM_BUF_SEG_NUM

# Definition for REND_PCM_SUB_BUF_POOL
U_REND_PCM_SUB_BUF_SIZE = 8192	#(1024 * 48 / 24) * 2ch * 16bit (1024sample/frame@24kHz, 2ch, 16bit) (= MAX_PCM_BUF_SIZE defined in player_obj.cpp)
U_REND_PCM_SUB_BUF_SEG_NUM = 9  #StopコマンドによるFlush押出し考慮して+1
U_REND_PCM_SUB_BUF_POOL_SIZE = U_REND_PCM_SUB_BUF_SIZE * U_REND_PCM_SUB_BUF_SEG_NUM

# Definition for DEC_ES_SUB_BUF_POOL
U_DEC_ES_SUB_BUF_SIZE = 3072 # (768sample * 2ch * 2byte ) for Wav stream
U_DEC_ES_SUB_BUF_SEG_NUM = 3
U_DEC_ES_SUB_BUF_POOL_SIZE = U_DEC_ES_SUB_BUF_SIZE * U_DEC_ES_SUB_BUF_SEG_NUM

# Definition for DEC_APU_CMD_POOL
U_APU_CMD_SIZE = 92
U_DEC_APU_CMD_SEG_NUM = 5
U_DEC_APU_CMD_POOL_SIZE = U_APU_CMD_SIZE * U_DEC_APU_CMD_SEG_NUM

U_MIC_IN_BUF_SIZE = 480
U_MIC_IN_BUF_SEG_NUM = 5
U_MIC_IN_BUF_POOL_SIZE = U_MIC_IN_BUF_SIZE * U_MIC_IN_BUF_SEG_NUM

U_I2S_IN_BUF_SIZE = 960
U_I2S_IN_BUF_SEG_NUM = 5
U_I2S_IN_BUF_POOL_SIZE = U_I2S_IN_BUF_SIZE * U_I2S_IN_BUF_SEG_NUM

U_HP_OUT_BUF_SIZE = 960
U_HP_OUT_BUF_SEG_NUM = 5
U_HP_OUT_BUF_POOL_SIZE = U_HP_OUT_BUF_SIZE * U_HP_OUT_BUF_SEG_NUM

U_I2S_OUT_BUF_SIZE = 960
U_I2S_OUT_BUF_SEG_NUM = 5
U_I2S_OUT_BUF_POOL_SIZE = U_I2S_OUT_BUF_SIZE * U_I2S_OUT_BUF_SEG_NUM

U_MFE_OUT_BUF_SIZE = 160
U_MFE_OUT_BUF_SEG_NUM = 8
U_MFE_OUT_BUF_POOL_SIZE = U_MFE_OUT_BUF_SIZE * U_MFE_OUT_BUF_SEG_NUM

PoolAreas.init(
  [ # layout 0 for Player
    #[ name,                  area,              type,  align,        pool-size,                 seg,                   fence,  spinlock]
    ["DEC_ES_MAIN_BUF_POOL",  "AUDIO_WORK_AREA", Basic, U_STD_ALIGN,  U_DEC_ES_MAIN_BUF_POOL_SIZE,  U_DEC_ES_MAIN_BUF_SEG_NUM,  true,   ""],
    ["REND_PCM_BUF_POOL",     "AUDIO_WORK_AREA", Basic, U_STD_ALIGN,  U_REND_PCM_BUF_POOL_SIZE,     U_REND_PCM_BUF_SEG_NUM,     true,   ""],
    ["REND_PCM_SUB_BUF_POOL", "AUDIO_WORK_AREA", Basic, U_STD_ALIGN,  U_REND_PCM_SUB_BUF_POOL_SIZE, U_REND_PCM_SUB_BUF_SEG_NUM, true,   ""],
    ["DEC_APU_CMD_POOL",      "AUDIO_WORK_AREA", Basic, U_STD_ALIGN,  U_DEC_APU_CMD_POOL_SIZE,      U_DEC_APU_CMD_SEG_NUM,      true,   ""],
    ["DEC_ES_SUB_BUF_POOL",   "AUDIO_WORK_AREA", Basic, U_STD_ALIGN,  U_DEC_ES_SUB_BUF_POOL_SIZE,   U_DEC_ES_SUB_BUF_SEG_NUM,   true,   ""],
    nil # end of each layout
  ], # end of layout 0
  
  [ # layout 1 for SoundEffet
    #[ name,             area,              type,  align,       pool-size,               seg,                  fence, spinlock]
    ["MIC_IN_BUF_POOL",  "AUDIO_WORK_AREA", Basic, U_STD_ALIGN, U_MIC_IN_BUF_POOL_SIZE,  U_MIC_IN_BUF_SEG_NUM,  true, ""],
    ["I2S_IN_BUF_POOL",  "AUDIO_WORK_AREA", Basic, U_STD_ALIGN, U_I2S_IN_BUF_POOL_SIZE,  U_I2S_IN_BUF_SEG_NUM,  true, ""],
    ["HP_OUT_BUF_POOL",  "AUDIO_WORK_AREA", Basic, U_STD_ALIGN, U_HP_OUT_BUF_POOL_SIZE,  U_HP_OUT_BUF_SEG_NUM,  true, ""],
    ["I2S_OUT_BUF_POOL", "AUDIO_WORK_AREA", Basic, U_STD_ALIGN, U_I2S_OUT_BUF_POOL_SIZE, U_I2S_OUT_BUF_SEG_NUM, true, ""],
    ["MFE_OUT_BUF_POOL", "AUDIO_WORK_AREA", Basic, U_STD_ALIGN, U_MFE_OUT_BUF_POOL_SIZE, U_MFE_OUT_BUF_SEG_NUM, true, ""],
    nil # end of each layout
  ], # end of layout 1

  nil # end of definition
)

# generate header files
generate_files
