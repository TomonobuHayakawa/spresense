############################################################################
# modules/memutils/memory_manager/tool/SampleConfig/mem_layout.conf
#
#   Copyright 2018 Sony Semiconductor Solutions Corporation
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with the
#    distribution.
# 3. Neither the name Sony nor the names of its contributors
#    may be used to endorse or promote products derived from this software
#    without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
# OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
# AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
############################################################################

##############################################################################
# MemoryManager Configuration
#

UseFence            = false # プールフェンスの使用有無 USE_MEMMGR_FENCE
UseDynamicPool      = false # 動的生成プールの使用有無 USE_MEMMGR_DYNAMIC_POOL
UseOver255Segments  = false # 255を超えるセグメント(最大65535)の使用有無 USE_MEMMGR_OVER255_SEGMENTS
UseCopiedPoolAttr   = false # 静的プール属性を作業領域にコピーして使用するか否か USE_MEMMGR_COPIED_POOL_ATTR

# 以下は未実装のため、false固定とする
UseMultiCore        = false # マルチコアサポート(共有プール)の使用有無 USE_MEMMGR_MULTI_CORE
UseSegDeleter       = false # セグメント解放時コールバックの使用有無 USE_MEMMGR_SEG_DELETER
UseSegThreshold     = false # セグメント数閾値コールバックの使用有無 USE_MEMMGR_SEG_THRESHOLD
UseRingBufPool      = false # RingBufプールの使用有無 USE_MEMMGR_RINGBUF_POOL
UseRingBufThreshold = false # バッファ量の閾値コールバックの使用有無 USE_MEMMGR_RINGBUF_THRESHOLD

require "mem_layout.rb"

##############################################################################
# User defined constants
# スクリプト内定義と重ならないように、"U_"で開始して英大文字、数字と"_"のみとする
# "U_MEM_"で始まる名称で定義すると、output_headerに同名のマクロが出力される
#

U_MEM_ALLEGRO_CACHE_ALIGN  = 64
U_MEM_ALLEGRO_OFFSET_ALIGN = 0x1000

##############################################################################
# Dynamic pool constants
# output_headerに、NUM_DYN_POOLSマクロとして出力される
#
if UseDynamicPool
  NumDynamicPools      = 1  # 動的生成プールの予約数(1以上、255 - NUM_MEM_POOLS以下)
end

#######################################################################################
# Memory device definition
# output_headerに、name_ADDRマクロとname_SIZEマクロが出力される
#
# name: デバイス名(3文字以上。英大文字で始まり、英大文字, 数字, "_"が使用可能)
# ram : デバイスがRAMならば、true。それ以外ならばfalse
# addr: アドレス(4の倍数の値)
# size: バイト単位のサイズ(0を除く4の倍数の値)
#
MemoryDevices.init(
 # example for Allegro ISS environment
  # name     ram    addr        size
  ["DRAM",   true,  0x00000000, 0x08000000], # 128MB
  ["SRAM",   true,  0x1fc00000, 0x00040000], # 256KB

 # example for Beaune JTAG debug environment
#  ["CDRAM",   true,  0x00000000, 0x08000000], # 128MB Cached DRAM
#  ["LPDDR",   true,  0x08000000, 0x08000000], # 128MB LPDDR DRAM for JTAG debug
#  ["OCM",     true,  0x1fc00000, 0x00040000], # 256KB On Chip Memory (SRAM)
  nil # end of definition
)

##############################################################################
# Fixed area definition
# output_headerに、name_ALIGN, name_ADDR, name_SIZEマクロが出力される
# フェンスが有効な場合は、name_L_FENCE, name_U_FENCEマクロも出力される
#
# name  : 領域名(英大文字で始まり、"_AREA"で終わる名称。英大文字, 数字, _が使用可能)
# device: 領域を確保するMemoryDevicesのデバイス名
# align : 領域の開始アライメント。0を除くMinAlign(=4)の倍数を指定する
# size  : 領域のサイズ。(0を除く4の倍数の値)
#         各デバイスの最終領域には、残りサイズを示すRemainderSizeを指定可能
# fence : フェンスの有効・無効を指定する(この項目は、UseFenceがfalseの場合は無視される)
#         deviceがRAMの場合のみ、フェンスを有効化することができる
#
FixedAreas.init(
  # name,              device, align,                     size,          fence
  ["MAIN_MODULE_AREA", "DRAM", MinAlign,                  0x00420000,    false],
  ["DUMP_LOG_AREA",    "DRAM", U_MEM_ALLEGRO_CACHE_ALIGN, 0x00010000,    false],
  ["MEMMGR_POOL_AREA", "DRAM", U_MEM_ALLEGRO_CACHE_ALIGN, RemainderSize, false],

  ["BOOT_MODULE_AREA", "SRAM", MinAlign,                  0x00004000,    false],
  nil # end of definition
)

##############################################################################
# Pool layout definition
# output_headerに、プールIDとNUM_MEM_POOLS, NUM_MEM_LAYOUTSおよび
# Lx_name_ALIGN, Lx_name_ADDR, Lx_name_SIZE, Lx_name_NUM_SEG, Lx_name_SEG_SIZE
# マクロが出力される(xはレイアウト番号)
# フェンスが有効な場合は、Lx_name_L_FENCE, Lx_name_U_FENCEマクロも出力される
#
# name : プール名(英大文字で始まり、"_POOL"で終わる名称。英大文字, 数字, _が使用可能)
# area : プール領域として使用するFixedAreaの領域名。領域はRAMに配置されていること
# type : プール種別。Basic, RingBuf(UseRingBufがtrueの場合に指定可能)のいずれか
# align: プールの開始アライメント。0を除くMinAlign(=4)の倍数を指定する
# size : プールのサイズ。0を除く4の倍数の値。Basicプールでは、セグメントサイズ * セグメント数
#        各areaの最終領域には、残りサイズを示すRemainderSizeを指定することができる
# seg  : セグメント数(1以上、255または65535以下)を指定する。UseOver255Segmentsを参照のこと
#        Basicプールの場合、size/seg が各セグメントのサイズとなる(剰余は無視される)
# fence    : フェンスの有効・無効を指定する。この項目は、UseFenceがfalseの場合は無視される
# spinlock : CPUコア間で共有する場合はスピンロック名を、非共有時は、""を指定する。
#            この項目は、UseMultiCoreがfalseの場合は無視される
#
PoolAreas.init(
  [ # layout 0
   #[ name,        area,              type,  align,                     size,         seg, fence, spinlock]
    ["ID1_POOL",  "MEMMGR_POOL_AREA", Basic, U_MEM_ALLEGRO_CACHE_ALIGN,   80 *140,    140, false, ""],
    ["ID2_POOL",  "MEMMGR_POOL_AREA", Basic, U_MEM_ALLEGRO_CACHE_ALIGN,  144 *130,    130, false, ""],
    ["ID3_POOL",  "MEMMGR_POOL_AREA", Basic, U_MEM_ALLEGRO_CACHE_ALIGN,  304 * 16,     16, false, ""],
    ["ID4_POOL",  "MEMMGR_POOL_AREA", Basic, U_MEM_ALLEGRO_CACHE_ALIGN, 1088 * 26,     26, false, ""],
    ["ID5_POOL",  "MEMMGR_POOL_AREA", Basic, U_MEM_ALLEGRO_CACHE_ALIGN, 4160 *  3,      3, false, ""],
    nil # end of each layout
  ], # end of layout 0

  nil # end of definition
)

# generate header file and source file
generate_files
